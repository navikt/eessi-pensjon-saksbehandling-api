buildscript {
    ext {
        kotlinVersion = '1.3.72'
        springBootVersion = '2.2.6.RELEASE'
        springfoxVersion = '2.9.2'
        jacksonVersion = '2.11.0'
        mockitoVersion = '3.3.3'
        oidcTokenSupportVersion = '0.2.18'
        logstashLogbackVersion = '6.3'
        pac4jVersion = '3.2.0'
        cxfVersion = '3.3.4'
        openhtmltopdfVersion = '1.0.0'
    }
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.13'
    id "org.owasp.dependencycheck" version "5.3.2.1"
    id "org.sonarqube" version "2.8"
    id 'jacoco'
    id 'com.adarshr.test-logger' version '2.0.0'
}

assert JavaVersion.current().isJava11Compatible(): "Java 11 or newer is required"

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    systemProperty "file.encoding", "utf-8"
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}


group = 'no.nav.eessi'
version = '0.0.1'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}
jar {
    baseName = 'eessi-fagmodul-frontend'
}

dependencies {
    // Tjenestespesifikasjoner
    implementation("no.nav.tjenestespesifikasjoner:person-v3-tjenestespesifikasjon:1.2020.01.30-14.36-cdf257baea96")
    implementation("no.nav.tjenestespesifikasjoner:nav-fim-behandleJournal-v3-tjenestespesifikasjon:1.2020.01.30-14.36-cdf257baea96")

//  Se VarselService for Ã¥rsak til utkommentering
//  implementation('no.nav.meldinger.virksomhet:nav-virksomhet-varsel-v1-meldingsdefinisjon:1.1.1:jaxb')


    // Spring
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation('org.springframework.boot:spring-boot-starter-websocket')
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: 'junit'
        exclude module: "mockito-core"
    }
    implementation("org.springframework:spring-jms")
    // MQ
    implementation("com.ibm.mq:com.ibm.mq.allclient:9.1.5.0")

    // Messaging
    implementation("org.springframework:spring-websocket")
    implementation("org.springframework:spring-messaging")

    // Kafka
    implementation("org.springframework.kafka:spring-kafka")

    // Apache CXF
    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    implementation("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")

    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")
    implementation("commons-io:commons-io:2.6")

    // Kotlin
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    // Swagger
    implementation("io.springfox:springfox-swagger2:${springfoxVersion}")
    implementation("io.springfox:springfox-swagger-ui:${springfoxVersion}")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'
    implementation("no.nav.eessi.pensjon:ep-logging:0.0.12")

    // auditlogger syslog
    implementation("com.papertrailapp:logback-syslog4j:1.0.0")
    implementation("org.syslog4j:syslog4j:0.9.30")

    // PDF box
    implementation("org.apache.pdfbox:pdfbox:2.0.18")
    implementation("com.openhtmltopdf:openhtmltopdf-core:${openhtmltopdfVersion}")
    implementation("com.openhtmltopdf:openhtmltopdf-pdfbox:${openhtmltopdfVersion}")
    implementation("com.openhtmltopdf:openhtmltopdf-jsoup-dom-converter:${openhtmltopdfVersion}") // deprecated

    // HTML-parser/manipulator
    implementation('org.jsoup:jsoup:1.12.1')

    // Amazon S3
    implementation("com.amazonaws:aws-java-sdk-s3:1.11.703")

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus")
    implementation("no.nav.eessi.pensjon:ep-metrics:0.3.6")
    
    // OIDC
    implementation("no.nav.security:oidc-spring-support:${oidcTokenSupportVersion}")
    implementation("no.nav.security:oidc-test-support:${oidcTokenSupportVersion}")
    implementation("org.pac4j:spring-webmvc-pac4j:${pac4jVersion}")
    implementation("org.pac4j:pac4j-oidc:${pac4jVersion}")
    implementation("org.pac4j:pac4j-core:${pac4jVersion}")

    // STS
    implementation("no.nav.eessi.pensjon:ep-security-sts:0.0.8")

    //mock
    testImplementation("no.nav.security:oidc-test-support:${oidcTokenSupportVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter:5.6.2")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
    testImplementation("io.findify:s3mock_2.12:0.2.5")
    testImplementation "io.mockk:mockk:1.10.0"

    // Architecture tests
    testImplementation 'com.tngtech.archunit:archunit:0.13.1'

    // Allows for variable expiration-date of each cache-entry
    implementation("net.jodah:expiringmap:0.5.9")

    // Apache CXF
    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    implementation("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")
    implementation('org.jvnet.jaxb2_commons:jaxb2-basics-runtime:1.11.1')

    // Kafka
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testCompileOnly('junit:junit:4.12') {
        because "spring-kafka-test needs it - but we should not use it in our code"
    }

    // LDAP
    implementation("org.springframework.ldap:spring-ldap-core")
    implementation("org.springframework.security:spring-security-ldap")
    implementation("com.unboundid:unboundid-ldapsdk")
}

repositories {
    mavenCentral()

    ["maven-release","tjenestespesifikasjoner","ep-metrics"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

//
//bootRun {
//    String activeProfile = System.properties['spring.profiles.active']
//    systemProperty "spring.profiles.active", activeProfile
//}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn jacocoTestReport

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
    }
    revision = 'release'
}
