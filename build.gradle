buildscript {
    ext {
        kotlinVersion = '1.6.21'
        springBootVersion = '2.6.7'
        jacksonVersion = '2.13.3'
        tokenSupportVersion = '1.3.9'
        logstashLogbackVersion = '6.6'
        pac4jVersion = '5.4.3'
        cxfVersion = '3.5.2'
        gcpStorageVersion = '2.6.1'
    }
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id "org.owasp.dependencycheck" version "7.1.1"
    id 'com.adarshr.test-logger' version '3.2.0'
    id "org.sonarqube" version "3.4.0.2513"
    id 'jacoco'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    systemProperty "file.encoding", "utf-8"
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

group = 'no.nav.eessi'

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17): "Java 17 or newer is required"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}
jar {
    archiveBaseName = 'eessi-pensjon-saksbehandling-api'
}

dependencies {

    // Spring
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: "junit-vintage-engine"
    }
    implementation("org.springframework:spring-jms")

    // Messaging
    implementation("org.springframework:spring-websocket")
    implementation("org.springframework:spring-messaging")

    // Kafka
    implementation("org.springframework.kafka:spring-kafka")

    // Apache CXF
    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    implementation("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")

    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")

    // Kotlin
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'
    implementation("no.nav.eessi.pensjon:ep-logging:1.0.24")

    //GCP
    implementation("com.google.cloud:google-cloud-storage:$gcpStorageVersion")
    implementation(platform("com.google.cloud:libraries-bom:23.0.0"))

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus")
    implementation("no.nav.eessi.pensjon:ep-metrics:0.4.29")
    implementation("no.nav.eessi.pensjon:ep-eux:1.1.76")
    //auth
    implementation("no.nav.security:token-client-spring:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-spring:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-jaxrs:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-test-support:${tokenSupportVersion}")

/*
    implementation("org.pac4j:spring-webmvc-pac4j:${pac4jVersion}")
*/
    implementation("org.pac4j:pac4j-oidc:${pac4jVersion}")
    implementation("org.pac4j:pac4j-core:${pac4jVersion}")

    //mock
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')

    testImplementation('io.mockk:mockk:1.12.4')
    testImplementation('com.ninja-squad:springmockk:3.1.1')

    // Architecture tests
    testImplementation 'com.tngtech.archunit:archunit:0.23.1'

    // Apache CXF
    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    implementation("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")
    implementation('org.jvnet.jaxb2_commons:jaxb2-basics-runtime:1.11.1')

    // Kafka
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // LDAP
    implementation("org.springframework.ldap:spring-ldap-core")
    implementation("org.springframework.security:spring-security-ldap")
    implementation("com.unboundid:unboundid-ldapsdk")
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]


repositories {
    mavenCentral()

    String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
    if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")

    maven {
        url = uri("https://maven.pkg.github.com/navikt/maven-release")
        credentials {
            username = "token"
            password = token
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
    }
    revision = 'release'
}
