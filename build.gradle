buildscript {
    ext {
        kotlinVersion = '1.3.20'
        springVersion = '5.1.6.RELEASE'
        springBootVersion = '2.1.2.RELEASE'
        springfoxVersion = '2.9.2'
        kafkaVersion = '2.2.7.RELEASE'
        jacksonModuleKotlinVersion = '2.9.8'
        mockitoVersion = '3.0.0'
        oidcTokenSupportVersion = '0.2.15'
        logstashLogbackVersion = '5.3'
        pac4jVersion = '3.2.0'
        cxfVersion = '3.2.7'
        personV3Version = '3.4.1'
    }
    repositories {
        maven {
            url "https://repo.adeo.no/repository/maven-central"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.21.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.12'
    id "org.sonarqube" version "2.7.1"
    id 'jacoco'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    systemProperty "file.encoding", "utf-8"
}

group = 'no.nav.eessi'
version = '0.0.1'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
jar {
    baseName = 'eessi-fagmodul-frontend'
}

dependencies {

    //NAV
    compile("no.nav.tjenester:nav-person-v3-tjenestespesifikasjon:${personV3Version}")
    compile('no.nav.meldinger.virksomhet:nav-virksomhet-varsel-v1-meldingsdefinisjon:1.1.1:jaxb')
    compile("no.nav.tjenester.fim:nav-fim-behandleJournal-v3-tjenestespesifikasjon:3.0.2:jaxws")


    // Spring
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile('org.springframework.boot:spring-boot-starter-websocket')
    testCompile("org.springframework.boot:spring-boot-starter-test")
    compile("org.springframework:spring-jms")
    // MQ
    compile("com.ibm.mq:com.ibm.mq.allclient:9.1.1.0")

    // Messaging
    compile("org.springframework:spring-websocket:${springVersion}")
    compile("org.springframework:spring-messaging:${springVersion}")

    // Kafka
    compile("org.springframework.kafka:spring-kafka:${kafkaVersion}")
    compile("io.confluent:kafka-avro-serializer:5.1.0") {
        exclude group: "org.apache.zookeeper",  module: "zookeeper"
    }

    // Apache CXF
    compile("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    compile("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")

    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8")
    compile("commons-io:commons-io:2.6")

    // Kotlin
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleKotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    // Swagger
    compile("io.springfox:springfox-swagger2:${springfoxVersion}")
    compile("io.springfox:springfox-swagger-ui:${springfoxVersion}")

    // Logging
    compile("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

    // PDF box
    compile("org.apache.pdfbox:pdfbox:2.0.13")
    compile('com.openhtmltopdf:openhtmltopdf-core:0.0.1-RC17')
    compile('com.openhtmltopdf:openhtmltopdf-pdfbox:0.0.1-RC17')
    compile('com.openhtmltopdf:openhtmltopdf-jsoup-dom-converter:0.0.1-RC17')

    // HTML-parser/manipulator
    compile('org.jsoup:jsoup:1.11.3')

    // Amazon S3
    compile("com.amazonaws:aws-java-sdk-s3:1.11.488")

    // Micrometer
    compile("io.micrometer:micrometer-registry-prometheus")
    
    // OIDC
    compile("no.nav.security:oidc-spring-support:${oidcTokenSupportVersion}")
    compile("no.nav.security:oidc-test-support:${oidcTokenSupportVersion}")
    compile("org.pac4j:spring-webmvc-pac4j:${pac4jVersion}")
    compile("org.pac4j:pac4j-oidc:${pac4jVersion}")
    compile("org.pac4j:pac4j-core:${pac4jVersion}")

    //mock
    testCompile("no.nav.security:oidc-test-support:${oidcTokenSupportVersion}")
    testCompile("org.mockito:mockito-core:${mockitoVersion}")
    testCompile("org.jetbrains.kotlin:kotlin-test")
    testCompile("org.jetbrains.kotlin:kotlin-test-junit")
    testCompile("com.nhaarman:mockito-kotlin-kt1.1:1.6.0")
    testCompile("io.findify:s3mock_2.12:0.2.5")

    // Architecture tests
    testImplementation 'com.tngtech.archunit:archunit:0.10.2'

    // Allows for variable expiration-date of each cache-entry
    compile("net.jodah:expiringmap:0.5.9")

    // Apache CXF
    compile("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    compile("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")
    compile('org.jvnet.jaxb2_commons:jaxb2-basics-runtime:1.11.1')
}

repositories {
    maven {
        name 'Confluent maven repo'
        url 'http://packages.confluent.io/maven/'
    }
    maven {
        url "https://repo.adeo.no/repository/maven-central"
    }
    maven {
        url "https://repo.adeo.no/repository/maven-releases/"
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

//
//bootRun {
//    String activeProfile = System.properties['spring.profiles.active']
//    systemProperty "spring.profiles.active", activeProfile
//}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn jacocoTestReport

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Not a real release')
                }
            }
        }
    }
    revision = 'release'
}
