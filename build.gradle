buildscript {
    ext {
        kotlinVersion = '1.5.21'
        springBootVersion = '2.6.6'
        springfoxVersion = '3.0.0'
        jacksonVersion = '2.12.1'
        tokenSupportVersion = '1.3.9'
        logstashLogbackVersion = '6.6'
        pac4jVersion = '4.0.1'
        cxfVersion = '3.4.2'
        openhtmltopdfVersion = '1.0.0'
        gcpStorageVersion = '2.0.1'
    }
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.13'
    id "org.owasp.dependencycheck" version "6.5.0.1"
    id 'com.adarshr.test-logger' version '2.1.1'
}

assert JavaVersion.current().isJava11Compatible(): "Java 11 or newer is required"

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    systemProperty "file.encoding", "utf-8"
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

group = 'no.nav.eessi'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}
jar {
    archiveBaseName = 'eessi-fagmodul-frontend'
}

dependencies {

    // Spring
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: "junit-vintage-engine"
    }
    implementation("org.springframework:spring-jms")

    // Messaging
    implementation("org.springframework:spring-websocket")
    implementation("org.springframework:spring-messaging")

    // Kafka
    implementation("org.springframework.kafka:spring-kafka")

    // Apache CXF
    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    implementation("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")

    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")

    // Kotlin
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    // Swagger
    implementation("io.springfox:springfox-swagger2:${springfoxVersion}")
    implementation("io.springfox:springfox-swagger-ui:${springfoxVersion}")
    implementation("io.springfox:springfox-data-rest:${springfoxVersion}")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'
    implementation("no.nav.eessi.pensjon:ep-logging:1.0.16")

    // PDF box
    implementation("org.apache.pdfbox:pdfbox:2.0.24")
    implementation("com.openhtmltopdf:openhtmltopdf-core:${openhtmltopdfVersion}")
    implementation("com.openhtmltopdf:openhtmltopdf-pdfbox:${openhtmltopdfVersion}")
    implementation('org.jsoup:jsoup:1.13.1')

    //GCP
    implementation("com.google.cloud:google-cloud-storage:$gcpStorageVersion")
    implementation(platform("com.google.cloud:libraries-bom:23.0.0"))

    // Amazon S3
    implementation("com.amazonaws:aws-java-sdk-s3:1.11.959")

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus")
    implementation("no.nav.eessi.pensjon:ep-metrics:0.4.9")
    implementation("no.nav.eessi.pensjon:ep-eux:1.1.62")
    //auth
    implementation("no.nav.security:token-client-spring:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-spring:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-jaxrs:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-test-support:${tokenSupportVersion}")

    implementation("org.pac4j:spring-webmvc-pac4j:${pac4jVersion}")
    implementation("org.pac4j:pac4j-oidc:${pac4jVersion}")
    implementation("org.pac4j:pac4j-core:${pac4jVersion}")

    //mock
    testImplementation("org.junit.jupiter:junit-jupiter:5.7.1")
    testImplementation 'io.findify:s3mock_2.13:0.2.6'

    testImplementation("io.mockk:mockk:1.11.0")
    testImplementation("com.ninja-squad:springmockk:3.0.1")

    // Architecture tests
    testImplementation 'com.tngtech.archunit:archunit:0.17.0'

    // Allows for variable expiration-date of each cache-entry
    implementation("net.jodah:expiringmap:0.5.9")

    // Apache CXF
    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    implementation("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")
    implementation('org.jvnet.jaxb2_commons:jaxb2-basics-runtime:1.11.1')

    // Kafka
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // LDAP
    implementation("org.springframework.ldap:spring-ldap-core")
    implementation("org.springframework.security:spring-security-ldap")
    implementation("com.unboundid:unboundid-ldapsdk")
}

repositories {
    mavenCentral()

    String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
    if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")

    maven {
        url = uri("https://maven.pkg.github.com/navikt/maven-release")
        credentials {
            username = "token"
            password = token
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
    }
    revision = 'release'
}
